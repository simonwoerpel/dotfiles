" vim:ft=vim
" settings for different filetypes
augroup vimrc_autocmds
    autocmd!
    "highlight characters past column 119
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
    autocmd FileType python match Excess /\%119v.*/
    autocmd FileType python set nowrap
    autocmd FileType python set sw=4
    autocmd FileType python set ts=4
    autocmd FileType python set sts=4
    autocmd FileType javascript,json,jsx,html,jinja,css,scss,less set sw=2
    autocmd FileType javascript,json,jsx,html,jinja,css,scss,less set ts=2
    autocmd FileType javascript,json,jsx,html,jinja,css,scss,less set sts=2
    augroup END

" https://github.com/tell-k/vim-autopep8
let g:autopep8_max_line_length=119

" remove trailing ws
" https://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim
autocmd BufWritePre * :%s/\s\+$//e

" jsx
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" jsx riot.js "
au BufNewFile,BufRead *.tag setlocal ft=javascript

" jinja ft
au BufNewFile,BufRead *.html setlocal ft=html.jinja.jinja2 syn=jinja2

" R terminal
let R_term = "uxterm"

" UltiSnips
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" git gutter
nmap <localleader>gg :GitGutterLineHighlightsToggle<CR>
nmap <localleader>g :GitGutterToggle<CR>

" linenumbers
nmap <localleader>n :set number!<CR>

" enter goyo mode
nmap <F11> :Goyo<CR>

" incsearch / easymotion
" You can use other keymappings like <C-l> instead of <CR> if you want to
" " use these mappings as default search and somtimes want to move cursor with
" " EasyMotion.
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
    \   'converters': [incsearch#config#fuzzyword#converter()],
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <localleader>/ incsearch#go(<SID>incsearch_config())
noremap <silent><expr> <localleader>s incsearch#go(<SID>config_easyfuzzymotion())
noremap <silent><expr> <localleader>?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))
" map /  <Plug>(incsearch-easymotion-/)
" map ?  <Plug>(incsearch-easymotion-?)
" map g/ <Plug>(incsearch-stay)

" map z/ <Plug>(incsearch-fuzzy-/)
" map z? <Plug>(incsearch-fuzzy-?)
" map zg/ <Plug>(incsearch-fuzzy-stay)
map  <localleader>f <Plug>(easymotion-bd-f2)
nmap <localleader>f <Plug>(easymotion-overwin-f2)
map <localleader>l <Plug>(easymotion-bd-jk)
nmap <localleader>l <Plug>(easymotion-overwin-line)
map  <localleader>w <Plug>(easymotion-bd-w)
nmap <localleader>w <Plug>(easymotion-overwin-w)

" " css/less/scss
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd FileType less set omnifunc=csscomplete#CompleteCSS

" jedi
let g:jedi#popup_on_dot = 0
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

" tern
nmap <leader>d :TernDef<CR>
nmap <leader>r :TernRename<CR>
nmap <leader>n :TernRefs<CR>
nmap K :TernDoc<CR>

" ycm
" let g:ycm_min_num_of_chars_for_completion = 1

" vim-markdown
" disable conceal for urls
let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1
